package com.krishna.rest.webservices.resfulwebservices.controllers;

import java.net.URI;
import java.util.List;
import java.util.Optional;

import org.apache.catalina.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.krishna.rest.webservices.resfulwebservices.entity.Post;
import com.krishna.rest.webservices.resfulwebservices.entity.Users;
import com.krishna.rest.webservices.resfulwebservices.exception.UserNotFoundException;
import com.krishna.rest.webservices.resfulwebservices.jpa.PostRepository;
import com.krishna.rest.webservices.resfulwebservices.jpa.UserRepository;
import com.krishna.rest.webservices.resfulwebservices.jpa.UserRepository;

import jakarta.validation.Valid;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;

@RestController
@RequestMapping("jpa")
public class UserJpaResource {

	@Autowired
	private UserRepository repo;
	
	@Autowired
	private PostRepository prepo;
	//Get /users
	
	@GetMapping("/")
	public List<Users> getAll()
	{
		return repo.findAll();
	}
	
	//Entity Model
	//WebMvcLinkBuider
	
	@GetMapping("/{id}")
	public EntityModel<Users> getUserById(@PathVariable Integer id)
	{
		Optional<Users> user= repo.findById(id);
		
		if(user.isEmpty())
			throw new UserNotFoundException("User not found with `id:"+id);
		
		EntityModel<Users> entityModel= EntityModel.of(user.get());
		
		WebMvcLinkBuilder link= linkTo(methodOn(this.getClass()).getAll());
		entityModel.add(link.withRel("all-users"));
		
		/*
		 * this structure is generated by hateoas with link
		 * with data we can also return links
		 
		 "_links": {
        "all-users": {
            "href": "http://localhost:8080/Users/"
        }
    }*/
		
		return entityModel;
	}
	
	@PostMapping("/")
	public Users createUser(@Valid @RequestBody Users user)
	{
		return repo.save(user);
	}
	
	@DeleteMapping("/{userId}")
	public void deleteById(@PathVariable int userId)
	{
		if(repo.findById(userId)==null)
			throw new UserNotFoundException("No user found with id: "+userId);
		
		repo.deleteById(userId);
	}
	
	@GetMapping("/users/{id}/post")
	public List<Post> getPostByAUser(@PathVariable int id)
	{
		Optional<Users> user = repo.findById(id);
		
		if(user.isEmpty())
			throw new UserNotFoundException("No user found with id: "+id);
		
		return user.get().getPosts();
	}
	
	@PostMapping("/users/{id}/posts")
	public ResponseEntity<Object> createPostByUser(@PathVariable int id, @Valid @RequestBody Post post)
	{
		Optional<Users> user = repo.findById(id);
		
		if(user.isEmpty())
			throw new UserNotFoundException("User not found with id: "+id);
		
		post.setUser(user.get());
		
		 Post savedPost=prepo.save(post);
		 
		 URI Location=ServletUriComponentsBuilder.fromCurrentRequest()
				 .path("/{id}").buildAndExpand(savedPost.getId()).toUri();
		 
		 user.get().getPosts();
		
		 return ResponseEntity.created(Location).build();
	}
}
