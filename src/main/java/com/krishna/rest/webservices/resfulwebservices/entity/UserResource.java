package com.krishna.rest.webservices.resfulwebservices.entity;

import java.util.List;

import org.apache.catalina.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.krishna.rest.webservices.resfulwebservices.exception.UserNotFoundException;

import jakarta.validation.Valid;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;

@RestController
@RequestMapping("Users")
public class UserResource {

	@Autowired
	private UserDaoService service;
	//Get /users
	
	@GetMapping("/")
	public List<Users> getAll()
	{
		return service.findAll();
	}
	
	//Entity Model
	//WebMvcLinkBuider
	
	@GetMapping("/{id}")
	public EntityModel<Users> getUserById(@PathVariable Integer id)
	{
		Users user= service.findOne(id);
		
		if(user==null)
			throw new UserNotFoundException("id:"+id);
		
		EntityModel<Users> entityModel= EntityModel.of(user);
		
		WebMvcLinkBuilder link= linkTo(methodOn(this.getClass()).getAll());
		entityModel.add(link.withRel("all-users"));
		
		/*
		 * this structure is generated by hateoas with link
		 * with data we can also return links
		 
		 "_links": {
        "all-users": {
            "href": "http://localhost:8080/Users/"
        }
    }*/
		
		return entityModel;
	}
	
	@PostMapping("/")
	public ResponseEntity<Users> createUser(@Valid @RequestBody Users user)
	{
		return service.save(user);
	}
	
	@DeleteMapping("/{userId}")
	public void deleteById(@PathVariable int userId)
	{
		service.delete(userId);
	}
}
